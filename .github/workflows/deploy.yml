name: Deploy

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # This ensures we get all commits for version analysis
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Determine version bump
        id: version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"

          # Check commits since last tag
          COMMITS=$(git log $LAST_TAG..HEAD --format="%s")

          if echo "$COMMITS" | grep -q "^BREAKING CHANGE\|^[[:alnum:]]*!:"; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q "^feat\|^feature:"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

      - name: Version and Deploy
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          # Update version
          yarn version --${{ steps.version.outputs.bump }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          yarn version:apply

          # Create version commit and tag
          git add .
          git commit -m "chore: release v${NEW_VERSION}"
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"

          # Deploy to npm
          yarn deploy

          # Push version changes and tags
          git push origin HEAD:main --follow-tags

          # Sync with develop if it exists
          if git ls-remote --heads origin develop; then
            git fetch origin develop
            git checkout -b develop origin/develop
            git merge main
            git push origin develop
          fi
